<?php

// Job plan products SKU contants
define('ELDIS_JOB_PLAN_SPONSORED_PRODUCT_SKU', 'job-plan-sponsored');
define('ELDIS_JOB_PLAN_PREMIUM_SUBSCRIPTION_PRODUCT_SKU', 'job-plan-premium-subscription');
define('ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU', 'job-plan-premium-pay-per-post');

// Job plan limits
define('ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_LIMIT', 1);

/**
 * Documentation of the drupal commerce setup for the three subscription types
 *
 * Each of the three following types of product has a single product display
 * type and variation type and then a single instance of that type:
 *
 * Sponsored
 * --------------------------
 *
 * @todo writeup
 *
 *
 * Subscription (premium)
 * --------------------------
 *
 * @todo writeup
 *
 *
 * Pay per job
 * --------------------------
 *
 * @todo writeup
 *
 *
 * Future subscription types, how to create
 * ----------------------------------------
 *
 * There was mention of the possible requirement for a fourth subscription type
 * similar to the pay-per-post job plan. Here's how to do that:
 * 1. create the new product type
 * 2. assign correct license type
 * 3. setup rules ...
 * @todo finish this later
 *
 * General todo's
 * --------------
 * @todo handle case where user without job creation rights hits /node/add/job
 * something more than "access denied" should be shown
 *
 * @todo streamline the order process... bypass as much as possible for the Sponsored type
 * who do not need to pay:
 * - @todo automatic order completion once selecting "apply" (sponsored type)
 * - @todo user can be redirected to their dashboard with a message and email sent after
 *
 * @todo warning message for deletion attempt of job on pay per job plan (as recreation
 * not allowed as this would be job posting number 2)
 *
 * @todo code the db update so that eldis_job module gets a heavier weight to ensure that
 *
 *
 * Notes
 * -----
 *
 * - If you delete a license, the related order will also be removed (this does not happen the other way)
 * - incomplete checkouts create licenses that are not active, these should be cleaned up...
 */

/**
 * Implements hook_form_alter()
 *
 * Alter the text of the "add to cart buttons"
 * and their visibility depending on what license we have (as logged in user)
 * @todo case where anon user can select products is yet to be covered, as it circumvents this checking
 */
function eldis_job_form_alter(&$form, &$form_state, $form_id) {

  // change the button text for the add to cart buttons
  // Sponsored job plan
  if(strpos($form_id, 'commerce_cart_add_to_cart_form_7') !== false) { // @note ids could change if products are recreated
    $form['submit']['#value'] = t('Apply');
    if(!eldis_job_show_add_to_cart(ELDIS_JOB_PLAN_SPONSORED_PRODUCT_SKU)) {
      unset($form['submit']);
    }
  }
  // Premium subscription job plan
  if(strpos($form_id, 'commerce_cart_add_to_cart_form_5') !== false) {
    $form['submit']['#value'] = t('Sign up');
    if(!eldis_job_show_add_to_cart(ELDIS_JOB_PLAN_PREMIUM_SUBSCRIPTION_PRODUCT_SKU)) {
      unset($form['submit']);
    }
  }
  // Premium pay per job posting plan
  if(strpos($form_id, 'commerce_cart_add_to_cart_form_8') !== false) {
    $form['submit']['#value'] = t('Sign up');
    if(!eldis_job_show_add_to_cart(ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU)) {
      unset($form['submit']);
    }
  }
}

/**
 * eldis_job_show_add_to_cart
 *
 * determine whether we will allow the user to add a product
 *
 * @todo streamline this function by using the EFQ condition "IN"
 * instead of ||'d function calls in eldis_jobs_non_revoked_license_exists
 * so that it takes an array of status's
 *
 * @todo handle the case whereby the user can add stuff to the cart
 * without having an account
 * --> at the moment, enforcing registration before allowing selecting
 * products is probably good...
 */
function eldis_job_show_add_to_cart($sku_button) {
  global $user;

  // @todo this covers the case whereby we look at the choose a job page without a user account
  if(user_is_anonymous()) {
    return true;
  }

  // load a product
  $product = commerce_product_load_by_sku($sku_button);

  switch($sku_button) {
    case ELDIS_JOB_PLAN_SPONSORED_PRODUCT_SKU:
    case ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU:
    case ELDIS_JOB_PLAN_PREMIUM_SUBSCRIPTION_PRODUCT_SKU:
      if(
        // if we have a license for this product of status active or created, then we cannot have another
        eldis_jobs_license_of_status_exists($product, $user, COMMERCE_LICENSE_CREATED) ||
        eldis_jobs_license_of_status_exists($product, $user, COMMERCE_LICENSE_ACTIVE)
      ) {
        return false;
      }
      break;

    default:
      // unknown sku!
  }
  return true;
}

/**
 * User has active pay per job license
 */
function eldis_job_user_has_pay_per_job_license($user) {

  // Load the pay per job product by sku
  $product = commerce_product_load_by_sku(ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU);

  if(!$product) {
    watchdog('eldis_job_user_has_pay_per_job_license', 'unable to load product by sku'.ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU, WATCHDOG_CRITICAL);
  }

  // load matching licenses (and use the latest)
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'commerce_license')
    ->propertyCondition('status', COMMERCE_LICENSE_ACTIVE)
    ->propertyCondition('product_id', $product->product_id)
    ->propertyCondition('uid', $user->uid)
    ->propertyOrderBy('granted', 'value', 'DESC');
  $result = $query->execute();

  watchdog('eldis_job_user_has_pay_per_job_license', print_r($result, true));

  // check if we have any licenses
  if(isset($result['commerce_license'])) {
//    $id = array_shift($result);
    $ids = array_keys($result['commerce_license']);
    watchdog('eldis_job_user_has_pay_per_job_license ids', print_r($ids, true));
    $id = array_shift($ids);
    watchdog('eldis_job_user_has_pay_per_job_license id', print_r($id, true));
    return entity_load_single('commerce_license', $id);
  } else {
    watchdog('eldis_job_user_has_pay_per_job_license', 'no licenses of type pay per job');
    return false;
  }
}

/**
 * eldis_jobs_license_exists
 *
 * checks if a license exists, without the ACTIVE condition, so any state.
 *
 * @todo make $status an array, and use IN propCondition
 */
function eldis_jobs_license_of_status_exists($product, $account = NULL, $status) {
  global $user;

  if (!$account) {
    $account = $user;
  }

//  $results = &drupal_static(__FUNCTION__, array());
  $uid = $account->uid;
  $product_id = $product->product_id;
  if (empty($results[$uid]) || empty($results[$uid][$product_id])) {
    $query = new EntityFieldQuery;
    $query
      ->entityCondition('entity_type', 'commerce_license')
      ->propertyCondition('status', $status)
      ->propertyCondition('product_id', $product_id)
      ->propertyCondition('uid', $uid)
      ->count();
    $results[$uid][$product_id] = $query->execute();
  }

  return $results[$uid][$product_id];
}

/**
 * Rules action callback: overrides commerce_license_activate_order_licenses
 *
 * Places in exceptions for the Sponsored type, activate manually
 * following approval rather than automativally when order is completed
 *
 * @todo this gets executed twice due to the rules for free and
 * normal licenses... what's the best way to do this just once?
 * - this shouldn't actually happen once we are NOT paying 0
 * i.e. when free orders are properly handled, this will happen only once.
 */
function eldis_job_activate_order_licenses($order) {

  $licenses = commerce_license_get_order_licenses($order);
  foreach ($licenses as $license) {

    $license_wrapper = entity_metadata_wrapper('commerce_license', $license);
    $product = $license_wrapper->product->value();

    switch($product->sku) {
      case ELDIS_JOB_PLAN_SPONSORED_PRODUCT_SKU:
        watchdog('sponsored', 'sponsored');
        // @todo notify sponsored subscription is pending, to user
        // @todo notify pending sponsored application to review, to backoffice
        // @todo how to notify when license is actually activated, hook_entity_update()

        continue;

      case ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU:
        watchdog('pay per job', 'pay per job');
        $license->activate();
        // @todo notify pay per post subscription activated

        break;
      case ELDIS_JOB_PLAN_PREMIUM_SUBSCRIPTION_PRODUCT_SKU:
        watchdog('premium', 'premium');
        $license->activate();
        // @todo notify premium subscription activated

        break;
    }
  }
}

/**
 * Rules action callback: Revoke context user's pay per job license.
 */
function eldis_job_license_revoke_pay_per_job($job) {

  // get the user from the job
  $user = user_load($job->uid);

  // return the users pay per job license, if exists. If not, move on.
  if($license = eldis_job_user_has_pay_per_job_license($user)) {
    // revoke the license
    commerce_license_revoke_action($license);
    // @todo notify that pay per job license has been used
    drupal_set_message('You have just posted your single "Pay per post" job. Please consider purchasing a monthly subscription.');
    watchdog('Revoke user pay per job license', $license->license_id);
  }
}
