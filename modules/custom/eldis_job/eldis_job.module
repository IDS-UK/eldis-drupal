<?php

// Job plan products SKU contants
define('ELDIS_JOB_PLAN_SPONSORED_PRODUCT_SKU', 'job-plan-sponsored');
define('ELDIS_JOB_PLAN_PREMIUM_SUBSCRIPTION_PRODUCT_SKU', 'job-plan-premium-subscription');
define('ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU', 'job-plan-premium-pay-per-post');
define('ELDIS_JOB_PLAN_TRIAL_3_MONTH_SKU', 'job-plan-trial-3-month');

// Job plan limits
define('ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_LIMIT', 1);

/**
 * General workings of this commerce setup (as of the date of this commit and following DB commit)
 *
 * - Modified and extended Commerce Kickstart profile
 * - Subscription system based mainly on commerce_license, commerce_license_role
 * - 4 "job plan" product types, with single product instance for each as follows below
 * - 4 corresponding roles, which are independently granted on ACTIVATION of the corresponding role based license
 * which reference the above products
 * - Sagepay payment gateway installed using the default "server" integration (see payment method activation RULE)
 *
 * 1. Sponsored subscription:
 *
 * Free (Â£0) product, on "add to cart", actions fire to complete the checkout, complete the order and notify, but not
 * activate the license (eldis_job_activate_order_licenses). The license will remain as "created" until it is activated or
 * "revoked". (general N.B both revokation and deletion REMOVE THE ROLE GRANTED) Role is granted ONLY on activation.
 * @todo suggest including contact details, and an "approve" button in the license admin view.
 * @todo suggest cron "job" to notify of a batch of unprocessed "applications" (also orphaned licenses due to partial checkouts)
 *
 * 2. Subscription Premium
 *
 * Not free. normal checkout procedure, on "order paid in full" a rule fires the action
 * that has callback "eldis_job_activate_order_licenses" (below)
 * Creates order of type "recurring".
 * @todo test with a smaller duration in order to test the recurring transaction:
 * -> @todo cron will run to process these repeat orders:
 * --> continuous authorisation must be in place on merchant account
 * --> @todo sagepay return a continuous auth token which must be used for the repeat transactions
 * consult Sagepay docs.
 *
 * 3. Pay per job
 *
 * Not free. normal checkout procedure, similar to 2., creates a simple order that grants its corresponding role
 * via the license that references the correct product, points to note:
 * -> there is a rule that revokes the users license AFTER job node creation
 *
 * 4. Three month trial
 *
 * Similar to the sponsored license, but it is activated on checkout completion (done manually via create an order).
 * Product is also not published.
 *
 *
 * General todo's that are not obvious
 * -----------------------------------
 *
 * @todo for the two paid types, the function "eldis_job_activate_order_licenses" is called
 * but the messages it sets to notify the user are being overridden by subsequent rule, investigate
 *
 * @todo handle case where user without job creation rights hits /node/add/job
 * something more than "access denied" should be shown
 *
 * @todo warning message for deletion attempt of job on pay per job plan (as recreation
 * not allowed as this would be job posting number 2)
 *
 *
 * Notes
 * -----
 *
 * - If you delete a license, the related order will also be removed (this does not happen the other way)
 * - incomplete checkouts create licenses that are not active, these should be cleaned up on cron...
 */

/**
 * Implements hook_form_alter()
 *
 * Alter the text of the "add to cart buttons"
 * and their visibility depending on what license we have (as logged in user)
 * @todo case where anon user can select products is yet to be covered, as it circumvents this checking
 */
function eldis_job_form_alter(&$form, &$form_state, $form_id) {

  // change the button text for the add to cart buttons
  // Sponsored job plan
  if(strpos($form_id, 'commerce_cart_add_to_cart_form_7') !== false) { // @note ids could change if products are recreated
    $form['submit']['#value'] = t('Apply');
    if(!eldis_job_show_add_to_cart(ELDIS_JOB_PLAN_SPONSORED_PRODUCT_SKU)) {
      unset($form['submit']);
    }
  }
  // Premium subscription job plan
  if(strpos($form_id, 'commerce_cart_add_to_cart_form_5') !== false) {
    $form['submit']['#value'] = t('Sign up');
    if(!eldis_job_show_add_to_cart(ELDIS_JOB_PLAN_PREMIUM_SUBSCRIPTION_PRODUCT_SKU)) {
      unset($form['submit']);
    }
  }
  // Premium pay per job posting plan
  if(strpos($form_id, 'commerce_cart_add_to_cart_form_8') !== false) {
    $form['submit']['#value'] = t('Sign up');
    if(!eldis_job_show_add_to_cart(ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU)) {
      unset($form['submit']);
    }
  }
}

/**
 * eldis_job_show_add_to_cart
 *
 * determine whether we will allow the user to add a product
 *
 * @todo streamline this function by using the EFQ condition "IN"
 * instead of ||'d function calls in eldis_jobs_non_revoked_license_exists
 * so that it takes an array of status's
 *
 * @todo handle the case whereby the user can add stuff to the cart
 * without having an account
 * --> at the moment, enforcing registration before allowing selecting
 * products is probably good...
 *
 * @todo make this a bit more efficient!
 *
 * This can easily be repurposed for validating "add to cart" form
 */
function eldis_job_show_add_to_cart($sku_button) {
  global $user;

  // @todo this covers the case whereby we look at the choose a job page without a user account
  if(user_is_anonymous()) {
    return true;
  }

  // load the three products
  $product_sponsored = commerce_product_load_by_sku(ELDIS_JOB_PLAN_SPONSORED_PRODUCT_SKU);
  $product_subscription = commerce_product_load_by_sku(ELDIS_JOB_PLAN_PREMIUM_SUBSCRIPTION_PRODUCT_SKU);
  $product_payperjob = commerce_product_load_by_sku(ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU);

  // which products does this user have
  $user_is_sponsored = eldis_jobs_license_of_status_exists($product_sponsored, $user, COMMERCE_LICENSE_CREATED)
                    || eldis_jobs_license_of_status_exists($product_sponsored, $user, COMMERCE_LICENSE_ACTIVE);
  $user_has_subscription = eldis_jobs_license_of_status_exists($product_subscription, $user, COMMERCE_LICENSE_ACTIVE);
  $user_has_payperjob = eldis_jobs_license_of_status_exists($product_payperjob, $user, COMMERCE_LICENSE_ACTIVE);

  // which button are we deciding to show or not
  switch($sku_button) {
    case ELDIS_JOB_PLAN_SPONSORED_PRODUCT_SKU:
      if($user_has_subscription || $user_has_payperjob || $user_is_sponsored) {
        return false; // hide button
      }
      break;
    case ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU:
      if($user_has_subscription || $user_has_payperjob) {
        return false;
      }
      break;
    case ELDIS_JOB_PLAN_PREMIUM_SUBSCRIPTION_PRODUCT_SKU:
      if($user_has_subscription) {
        return false;
      }
      break;
    default:
      // unknown sku!
  }
  return true;
}

/**
 * User has active pay per job license
 */
function eldis_job_user_has_pay_per_job_license($user) {

  // Load the pay per job product by sku
  $product = commerce_product_load_by_sku(ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU);

  if(!$product) {
    watchdog('eldis_job_user_has_pay_per_job_license', 'unable to load product by sku'.ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU, WATCHDOG_CRITICAL);
  }

  // load matching licenses (and use the latest)
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'commerce_license')
    ->propertyCondition('status', COMMERCE_LICENSE_ACTIVE)
    ->propertyCondition('product_id', $product->product_id)
    ->propertyCondition('uid', $user->uid)
    ->propertyOrderBy('granted', 'value', 'DESC');
  $result = $query->execute();

  // check if we have any licenses
  if(isset($result['commerce_license'])) {
    $ids = array_keys($result['commerce_license']);
    $id = array_shift($ids);
    return entity_load_single('commerce_license', $id);
  } else {
    return false;
  }
}

/**
 * eldis_jobs_license_exists
 *
 * checks if a license exists, without the ACTIVE condition, so any state.
 *
 * @todo make $status an array, and use IN propCondition
 */
function eldis_jobs_license_of_status_exists($product, $account = NULL, $status) {
  global $user;

  if (!$account) {
    $account = $user;
  }

  $uid = $account->uid;
  $product_id = $product->product_id;
  if (empty($results[$uid]) || empty($results[$uid][$product_id])) {
    $query = new EntityFieldQuery;
    $query
      ->entityCondition('entity_type', 'commerce_license')
      ->propertyCondition('status', $status)
      ->propertyCondition('product_id', $product_id)
      ->propertyCondition('uid', $uid)
      ->count();
    $results[$uid][$product_id] = $query->execute();
  }

  return $results[$uid][$product_id];
}

/**
 * Rules action callback: overrides commerce_license_activate_order_licenses
 *
 * Places an exceptions for the Sponsored type, activate manually
 * following approval rather than automatically when order is completed
 */
function eldis_job_activate_order_licenses($order) {

  $licenses = commerce_license_get_order_licenses($order);
  foreach ($licenses as $license) {

    $license_wrapper = entity_metadata_wrapper('commerce_license', $license);
    $product = $license_wrapper->product->value();

    switch($product->sku) {
      case ELDIS_JOB_PLAN_SPONSORED_PRODUCT_SKU:
        watchdog('Eldis license', 'Notify sponsored license pending approval: user '.$product->uid);
        drupal_set_message('Your request for a sponsored subscription has been received, we will get back to you very soon!');

        // @todo notify pending sponsored application to review, to backoffice
        // @todo how to notify when license is actually activated, hook_entity_update() (license module also gives)
        continue;

      case ELDIS_JOB_PLAN_PREMIUM_PAY_PER_POST_PRODUCT_SKU:
        watchdog('Eldis license', 'Activate license: '.$product->title.' user '.$product->uid);
        $license->activate();
        // @todo notify pay per post subscription activated
        drupal_set_message('You have just purchased a single job posting license, please post your job: node/add/job');
        break;

      case ELDIS_JOB_PLAN_PREMIUM_SUBSCRIPTION_PRODUCT_SKU:
        watchdog('Eldis license', 'Activate license: '.$product->title.' user '.$product->uid);
        $license->activate();
        // @todo notify premium subscription activated
        drupal_set_message('Your subscription is now active, please post some jobs: node/add/job');
        break;

      case ELDIS_JOB_PLAN_TRIAL_3_MONTH_SKU:
        watchdog('Eldis license', 'Activate license: '.$product->title.' user '.$product->uid);
        $license->activate();
        // @todo notify premium subscription activated
        drupal_set_message('Trial activated for user: '.$product->uid);
        break;
    }
  }
}

/**
 * Rules action callback: Revoke context user's pay per job license.
 */
function eldis_job_license_revoke_pay_per_job($job) {

  // get the user from the job
  $user = user_load($job->uid);

  // return the users pay per job license, if exists. If not, move on.
  if($license = eldis_job_user_has_pay_per_job_license($user)) {
    // revoke the license
    commerce_license_revoke_action($license);
    // @todo notify that pay per job license has been used
    drupal_set_message('You have just posted your single "Pay per post" job. Please consider purchasing a monthly subscription.');
    watchdog('Eldis license', 'Single job posted for pay per job license '.$license->license_id.'. License revoked');
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Be certain that roles are removed when a license is deleted
 * @note something with rules caused this to stop working.
 * This function is a simple failsafe.
 */
function eldis_job_entity_delete($entity, $entity_type) {

  if ($entity_type != 'commerce_license') {
    return;
  }

  // if this license has a user and associated product
  if ($entity->uid && $entity->product_id) {
    $role = $entity->wrapper->product->commerce_license_role->value();
    $owner = $entity->wrapper->owner->value();

    // if the owner has the role associated with this license, unset
    if (isset($owner->roles[$role])) {
      unset($owner->roles[$role]);
      user_save($owner);
      watchdog('Eldis license', 'Delete license (' . $entity->license_id . ') - removing role '.$role.' from user '.$owner->uid);
    }
  }
}
